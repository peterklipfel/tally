require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ClientsController do

  before(:each) do
    @user = FactoryGirl.create(:user)
    sign_in @user
    @user2 = FactoryGirl.create(:user)
  end
  let(:your_client) { FactoryGirl.create(:client, user: @user2) }
  let(:my_client) { FactoryGirl.create(:client, user: @user) }

  # This should return the minimal set of attributes required to create a valid
  # Client. As you add validations to Client, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { {  } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ClientsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all of my clients as @clients" do
      get :index, {}
      assigns(:clients).should eq([my_client])
    end
    it "does not show other peoples' clients" do
      get :index, {}
      assigns(:clients).should_not include(your_client)
    end
  end

  describe "GET show" do
    it "assigns the requested client as @client" do
      get :show, {:id => my_client.to_param}
      assigns(:client).should eq(my_client)
    end
    it "does something if I'm not allowed to see the client" do
      get :show, {id: your_client.to_param}
      response.should redirect_to(clients_path)
    end
  end

  describe "GET new" do
    it "assigns a new client as @client" do
      get :new, {}
      assigns(:client).should be_a_new(Client)
    end
  end

  describe "GET edit" do
    it "assigns the requested client as @client" do
      get :edit, {:id => my_client.to_param}
      assigns(:client).should eq(my_client)
    end
    it "redirects if I'm not allowed to edit the client" do
      get :edit, {:id => your_client.to_param}
      response.should redirect_to(clients_path)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Client" do
        expect {
          post :create, {:client => valid_attributes}
        }.to change(Client, :count).by(1)
      end

      it "assigns a newly created client as @client" do
        post :create, {:client => valid_attributes}
        assigns(:client).should be_a(Client)
        assigns(:client).should be_persisted
      end

      it "redirects to the created client" do
        post :create, {:client => valid_attributes}
        response.should redirect_to(Client.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved client as @client" do
        # Trigger the behavior that occurs when invalid params are submitted
        Client.any_instance.stub(:save).and_return(false)
        post :create, {:client => {  }}
        assigns(:client).should be_a_new(Client)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Client.any_instance.stub(:save).and_return(false)
        post :create, {:client => {  }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "when it is associated with me" do
      describe "with valid parameters" do
        it "updates the requested client" do
          Client.any_instance.should_receive(:update).with({ "name" => "Spring" })
          put :update, {:id => my_client.to_param, :client => { "name" => "Spring" }}
        end

        it "assigns the requested client as @client" do
          put :update, {:id => my_client.to_param, :client => { "name" => "Spring" }}
          assigns(:client).should eq(my_client)
        end

        it "redirects to the client" do
          put :update, {:id => my_client.to_param, :client => { "name" => "Spring" }}
          response.should redirect_to(my_client)
        end
      end
      
      describe "with invalid params" do
        it "assigns the client as @client" do
          Client.any_instance.stub(:save).and_return(false)
          put :update, {:id => my_client.to_param, :client => {  }}
          assigns(:client).should eq(my_client)
        end

        it "re-renders the 'edit' template" do
          Client.any_instance.stub(:save).and_return(false)
          put :update, {:id => my_client.to_param, :client => {  }}
          response.should render_template("edit")
        end
      end
    end

    describe "that is not associated with me" do
      it "reredirects to the index page" do
        put :update, {:id => your_client.to_param, :client => {  }}
        response.should redirect_to(clients_path)
      end
    end
  end

  describe "DELETE destroy" do
    describe "when it is associated with me" do
      it "destroys the requested client" do
        client = Client.create! user_id: @user.to_param
        expect {
          delete :destroy, {:id => client.to_param}
        }.to change(Client, :count).by(-1)
      end

      it "redirects to the clients list" do
        delete :destroy, {:id => my_client.to_param}
        response.should redirect_to(clients_url)
      end
    end
    describe "when it is not associated with me" do
      it "does not destroy the requested client" do
        client = Client.create! user_id: @user2.to_param
        expect {
          delete :destroy, {:id => client.to_param}
        }.to change(Client, :count).by(0)
      end
      it "redirects to the clients index path" do
        delete :destroy, {:id => your_client.to_param}
        response.should redirect_to(clients_url)
      end
    end
  end

end
