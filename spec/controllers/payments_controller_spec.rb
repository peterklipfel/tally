require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PaymentsController do

  before(:each) do
    @user = FactoryGirl.create(:user)
    sign_in @user
    @user2 = FactoryGirl.create(:user)
  end
  let(:your_payment) { FactoryGirl.create(:payment, user: @user2) }
  let(:my_payment) { FactoryGirl.create(:payment, user: @user) }

  # This should return the minimal set of attributes required to create a valid
  # Payment. As you add validations to Payment, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "invoice" => nil } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PaymentsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all payments as @payments" do
      my_payment #loads it
      your_payment #loads it
      get :index, {}
      assigns(:payments).should eq([my_payment])
    end
    it "does not show payments that are not mine" do
      my_payment #loads it
      your_payment #loads it
      get :index, {}
      assigns(:payments).should_not include(your_payment)
    end
  end

  describe "GET show" do
    it "assigns the requested payment as @payment" do
      get :show, {:id => my_payment.to_param}
      assigns(:payment).should eq(my_payment)
    end
    it "redirects to index if I'm not allowed to see the payment" do
      get :show, {id: your_payment.to_param}
      response.should redirect_to(payments_path)
    end
  end

  describe "GET new" do
    it "assigns a new payment as @payment" do
      get :new, {}
      assigns(:payment).should be_a_new(Payment)
    end
  end

  describe "GET edit" do
    it "assigns the requested payment as @payment" do
      get :edit, {:id => my_payment.to_param}
      assigns(:payment).should eq(my_payment)
    end
    it "redirects to index if I'm not allowed to see the invoice" do
      get :edit, {:id => your_payment.to_param}
      response.should redirect_to(payments_path)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Payment" do
        invoice = my_payment.invoice
        expect {
          post :create, {:payment => {invoice_id: invoice.to_param, amount: 1000}}
        }.to change(Payment, :count).by(1)
      end

      it "assigns a newly created payment as @payment" do
        post :create, {:payment => {invoice_id: my_payment.invoice.to_param, amount: 1000}}
        assigns(:payment).should be_a(Payment)
        assigns(:payment).should be_persisted
      end

      it "redirects to the preview page for the invoice of the created payment" do
        post :create, {:payment => {invoice_id: my_payment.invoice.to_param, amount: 1000}}
        response.should redirect_to(preview_invoice_path(Payment.last.invoice))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved payment as @payment" do
        # Trigger the behavior that occurs when invalid params are submitted
        Payment.any_instance.stub(:save).and_return(false)
        post :create, {:payment => {invoice_id: my_payment.invoice.to_param}}
        assigns(:payment).should be_a_new(Payment)
      end

      it "redirects to the preview page for the invoice of the created payment" do
        post :create, {:payment => {invoice_id: my_payment.invoice.to_param}}
        response.should redirect_to(preview_invoice_path(Payment.last.invoice))
      end
    end
  end

  describe "PUT update" do
    describe "when it is associated with me" do
      describe "with valid params" do
        it "updates the requested payment" do
          Payment.any_instance.should_receive(:update).with({ "amount" => "100.00" })
          put :update, {:id => my_payment.to_param, :payment => { "amount" => "100.00" }}
        end

        it "assigns the requested payment as @payment" do
          put :update, {:id => my_payment.to_param, :payment => valid_attributes}
          assigns(:payment).should eq(my_payment)
        end

        it "redirects to the payment" do
          put :update, {:id => my_payment.to_param, :payment => valid_attributes}
          response.should redirect_to(my_payment)
        end
      end

      describe "with invalid params" do
        it "assigns the payment as @payment" do
          Payment.any_instance.stub(:save).and_return(false)
          put :update, {:id => my_payment.to_param, :payment => { "invoice" => "invalid value" }}
          assigns(:payment).should eq(my_payment)
        end

        it "re-renders the 'edit' template" do
          Payment.any_instance.stub(:save).and_return(false)
          put :update, {:id => my_payment.to_param, :payment => { "invoice" => "invalid value" }}
          response.should render_template("edit")
        end
      end
    end
    describe "when it is not associated with me" do
      it "reredirects to the index page" do
        put :update, {:id => your_payment.to_param, :invoice => {  }}
        response.should redirect_to(payments_path)
      end
    end
  end

  describe "DELETE destroy" do
    describe "when it is associated with me" do
      it "destroys the requested payment" do
        payment = Payment.create! invoice_id: my_payment.invoice.to_param, amount: 100
        expect {
          delete :destroy, {:id => payment.to_param}
        }.to change(Payment, :count).by(-1)
      end

      it "redirects to the payments list" do
        payment = Payment.create! invoice_id: my_payment.invoice.to_param, amount: 100
        delete :destroy, {:id => payment.to_param}
        response.should redirect_to(payments_url)
      end
    end
    describe "when it is not associated with me" do
      it "does not destroy the requested payment" do
        payment = Payment.create! invoice_id: your_payment.invoice.to_param, amount: 100
        expect {
          delete :destroy, {:id => payment.to_param}
        }.to change(Payment, :count).by(0)
      end
      it "redirects to the payments index path" do
        delete :destroy, {:id => your_payment.to_param}
        response.should redirect_to(payments_url)
      end
    end
  end

end
